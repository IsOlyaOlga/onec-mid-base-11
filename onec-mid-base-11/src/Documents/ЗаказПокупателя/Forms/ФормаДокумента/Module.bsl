

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДО_ПересчитатьТаблицу(Команда) 
	
	// {{ Исакова О.С. Добавление команды Пересчитать таблицу

	//проверяем заполненность табличной части;	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено ИЛИ Элементы.Услуги.ТекущиеДанные <> Неопределено Тогда 
		ДО_ПрименитьСкидку();  
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	// }}
	
КонецПроцедуры 


&НаКлиенте
Процедура ДО_ПрименитьСкидку() 
	
	// {{ Исакова О.С. Добавление команды ДО_ПрименитьСкидку, вызывает процедуру пересчета суммы после применения скидки
	
	Для Каждого Товар ИЗ Объект.Товары Цикл // объект.Товары обращение к ТЧ Товары
		ДО_РасчитатьСуммуНоменклатура(Товар);
	КонецЦикла; 
	
	Для Каждого Услуга ИЗ Объект.Услуги Цикл // объект.Услуги обращение к ТЧ Услуги
		ДО_РасчитатьСуммуНоменклатура(Услуга);
	КонецЦикла;
	// }}
	
КонецПроцедуры

&НаКлиенте
Процедура ДО_РасчитатьСуммуНоменклатура(Номенклатура) 
	
	// {{ Исакова О.С. ДО_РасчитатьСуммуНоменклатура, пересчитывает суммы после применения скидок
  	ОбщаяСкидка = Объект.ДО_СогласованнаяСкидка + Номенклатура.Скидка;
	
	Если ОбщаяСкидка <= 100 Тогда
		Номенклатура.Сумма = Номенклатура.Цена * Номенклатура.Количество * (100 - ОбщаяСкидка) / 100; 
	Иначе
		Номенклатура.Сумма = 0;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Сумма скидок не может превышать 100%.";
		Сообщение.Сообщить();
	КонецЕсли;
    // }}

КонецПроцедуры


&НаКлиенте
Процедура ДО_ДО_СогласованнаяСкидкаПриИзменении(Элемент)
	
	// {{ Исакова О.С. при изменении скидки вызывает процедуру вопроса пользователю
			
	ДО_ЗадатьВопрос();
		
	РассчитатьСуммуДокумента();
	// }}

КонецПроцедуры

&НаКлиенте
Асинх Процедура ДО_ЗадатьВопрос()
	
	// {{ Исакова О.С. задает вопрос пользователю

	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Ждать ВопросАсинх("Пересчитать стоимость согласно установленной скидке?", Режим);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДО_ПрименитьСкидку();
	ИначеЕсли  Ответ = КодВозвратаДиалога.Нет Тогда
	 	Возврат
	КонецЕсли; 
			
	РассчитатьСуммуДокумента();
	// }}

КонецПроцедуры


&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	// {{ Исакова О.С. меняем расчет с учетом добавленной функциональности
	
	//КоэффициентСкидки = 1 - ТекущиеДанные.Скидка / 100;
	//ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество * КоэффициентСкидки;
	
	ДО_РасчитатьСуммуНоменклатура(ТекущиеДанные);
	// }}
	
 КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры



#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
